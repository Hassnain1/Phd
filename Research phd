{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":805364,"sourceType":"datasetVersion","datasetId":421612},{"sourceId":805410,"sourceType":"datasetVersion","datasetId":421676}],"dockerImageVersionId":29840,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport os","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from pathlib import Path\nimport json\nfrom random import randint\nfrom collections import Counter\nfrom collections import defaultdict","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:43:49.780117Z","iopub.execute_input":"2024-05-29T10:43:49.780489Z","iopub.status.idle":"2024-05-29T10:43:49.788907Z","shell.execute_reply.started":"2024-05-29T10:43:49.780423Z","shell.execute_reply":"2024-05-29T10:43:49.788208Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import json \nfrom PIL import Image, ImageDraw\nfrom IPython.display import display\nfrom shapely import wkt\nfrom shapely.geometry.multipolygon import MultiPolygon","metadata":{"_kg_hide-output":true,"execution":{"iopub.status.busy":"2024-05-29T10:43:49.790212Z","iopub.execute_input":"2024-05-29T10:43:49.790451Z","iopub.status.idle":"2024-05-29T10:43:49.878825Z","shell.execute_reply.started":"2024-05-29T10:43:49.790400Z","shell.execute_reply":"2024-05-29T10:43:49.878089Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom matplotlib import rcParams\nfrom copy import copy \n\n%matplotlib inline\n# figure size in inches optional\nrcParams['figure.figsize'] = 30, 30\nplt.rcParams['legend.title_fontsize'] = 14","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:43:49.881071Z","iopub.execute_input":"2024-05-29T10:43:49.881311Z","iopub.status.idle":"2024-05-29T10:43:49.889895Z","shell.execute_reply.started":"2024-05-29T10:43:49.881274Z","shell.execute_reply":"2024-05-29T10:43:49.888970Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# CODE FOR THIS CELL IS TAKEN FROM https://www.kaggle.com/alexisbcook/interactive-maps\nimport folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:43:49.892012Z","iopub.execute_input":"2024-05-29T10:43:49.892323Z","iopub.status.idle":"2024-05-29T10:43:50.861370Z","shell.execute_reply.started":"2024-05-29T10:43:49.892268Z","shell.execute_reply":"2024-05-29T10:43:50.860590Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# CODE FOR THIS CELL IS TAKEN FROM https://www.kaggle.com/alexisbcook/interactive-maps\n# Function for displaying the map\ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:43:50.862841Z","iopub.execute_input":"2024-05-29T10:43:50.863164Z","iopub.status.idle":"2024-05-29T10:43:50.868440Z","shell.execute_reply.started":"2024-05-29T10:43:50.863108Z","shell.execute_reply":"2024-05-29T10:43:50.867446Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Fetch all post disaster json files\nlabels_generator = Path('../input').rglob(pattern=f'*post_*.json')","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:43:50.869619Z","iopub.execute_input":"2024-05-29T10:43:50.869880Z","iopub.status.idle":"2024-05-29T10:43:50.878884Z","shell.execute_reply.started":"2024-05-29T10:43:50.869840Z","shell.execute_reply":"2024-05-29T10:43:50.877943Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Group json files by disaster\ndef get_disaster_dict(labels_generator):    \n    disaster_dict = defaultdict(list)\n    for label in labels_generator:\n        disaster_type = label.name.split('_')[0]\n        disaster_dict[disaster_type].append(str(label))\n    return disaster_dict","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:43:50.880142Z","iopub.execute_input":"2024-05-29T10:43:50.880455Z","iopub.status.idle":"2024-05-29T10:43:50.890592Z","shell.execute_reply.started":"2024-05-29T10:43:50.880400Z","shell.execute_reply":"2024-05-29T10:43:50.889820Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"disaster_dict = get_disaster_dict(labels_generator)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:43:50.891863Z","iopub.execute_input":"2024-05-29T10:43:50.892144Z","iopub.status.idle":"2024-05-29T10:44:22.127780Z","shell.execute_reply.started":"2024-05-29T10:43:50.892099Z","shell.execute_reply":"2024-05-29T10:44:22.126852Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# List of Disasters present in the dataset\ndisaster_dict.keys()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.129161Z","iopub.execute_input":"2024-05-29T10:44:22.129405Z","iopub.status.idle":"2024-05-29T10:44:22.135983Z","shell.execute_reply.started":"2024-05-29T10:44:22.129367Z","shell.execute_reply":"2024-05-29T10:44:22.135194Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Select a particular disaster\ndisaster_labels = disaster_dict['joplin-tornado']","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.137290Z","iopub.execute_input":"2024-05-29T10:44:22.137579Z","iopub.status.idle":"2024-05-29T10:44:22.147206Z","shell.execute_reply.started":"2024-05-29T10:44:22.137538Z","shell.execute_reply":"2024-05-29T10:44:22.146640Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def read_label(label_path):\n    with open(label_path) as json_file:\n        image_json = json.load(json_file)\n        return image_json","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.148579Z","iopub.execute_input":"2024-05-29T10:44:22.148875Z","iopub.status.idle":"2024-05-29T10:44:22.158073Z","shell.execute_reply.started":"2024-05-29T10:44:22.148826Z","shell.execute_reply":"2024-05-29T10:44:22.157377Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Color codes for polygons\ndamage_dict = {\n    \"no-damage\": (0, 255, 0, 50),\n    \"minor-damage\": (0, 0, 255, 50),\n    \"major-damage\": (255, 69, 0, 50),\n    \"destroyed\": (255, 0, 0, 50),\n    \"un-classified\": (255, 255, 255, 50)\n}","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.159150Z","iopub.execute_input":"2024-05-29T10:44:22.159363Z","iopub.status.idle":"2024-05-29T10:44:22.170634Z","shell.execute_reply.started":"2024-05-29T10:44:22.159327Z","shell.execute_reply":"2024-05-29T10:44:22.169912Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_damage_type(properties):\n    if 'subtype' in properties:\n        return properties['subtype']\n    else:\n        return 'no-damage'","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.171676Z","iopub.execute_input":"2024-05-29T10:44:22.171956Z","iopub.status.idle":"2024-05-29T10:44:22.179290Z","shell.execute_reply.started":"2024-05-29T10:44:22.171915Z","shell.execute_reply":"2024-05-29T10:44:22.178602Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def annotate_img(draw, coords):\n        wkt_polygons = []\n\n        for coord in coords:\n            damage = get_damage_type(coord['properties'])\n            wkt_polygons.append((damage, coord['wkt']))\n\n        polygons = []\n\n        for damage, swkt in wkt_polygons:\n            polygons.append((damage, wkt.loads(swkt)))\n\n        for damage, polygon in polygons:\n            x,y = polygon.exterior.coords.xy\n            coords = list(zip(x,y))\n            draw.polygon(coords, damage_dict[damage])\n\n        del draw","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.184341Z","iopub.execute_input":"2024-05-29T10:44:22.184593Z","iopub.status.idle":"2024-05-29T10:44:22.192891Z","shell.execute_reply.started":"2024-05-29T10:44:22.184556Z","shell.execute_reply":"2024-05-29T10:44:22.191964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def display_img(json_path, time='post', annotated=True):\n    if time=='pre':\n        json_path = json_path.replace('post', 'pre')\n        \n    img_path = json_path.replace('labels', 'images').replace('json','png')\n        \n    image_json = read_label(json_path)\n    img_name = image_json['metadata']['img_name']\n        \n    print(img_name)\n    \n    img = Image.open(img_path)\n    draw = ImageDraw.Draw(img, 'RGBA')\n    \n    if annotated:\n        annotate_img(draw, image_json['features']['xy'])\n\n    return img","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.194125Z","iopub.execute_input":"2024-05-29T10:44:22.194355Z","iopub.status.idle":"2024-05-29T10:44:22.203314Z","shell.execute_reply.started":"2024-05-29T10:44:22.194317Z","shell.execute_reply":"2024-05-29T10:44:22.202636Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_image(label):\n\n    # read images\n    img_A = display_img(label, time='pre', annotated=False)\n    img_B = display_img(label, time='post', annotated=False)\n    img_C = display_img(label, time='pre', annotated=True)\n    img_D = display_img(label, time='post', annotated=True)\n\n\n    # display images\n    fig, ax = plt.subplots(2,2)\n    fig.set_size_inches(30, 30)\n    TITLE_FONT_SIZE = 24\n    ax[0][0].imshow(img_A);\n    ax[0][0].set_title('Pre Diaster Image (Not Annotated)', fontsize=TITLE_FONT_SIZE)\n    ax[0][1].imshow(img_B);\n    ax[0][1].set_title('Post Diaster Image (Not Annotated)', fontsize=TITLE_FONT_SIZE)\n    ax[1][0].imshow(img_C);\n    ax[1][0].set_title('Pre Diaster Image (Annotated)', fontsize=TITLE_FONT_SIZE)\n    ax[1][1].imshow(img_D);\n    ax[1][1].set_title('Post Diaster Image (Annotated)', fontsize=TITLE_FONT_SIZE)\n    plt.savefig('split_image.png', dpi = 100)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.204562Z","iopub.execute_input":"2024-05-29T10:44:22.204842Z","iopub.status.idle":"2024-05-29T10:44:22.215820Z","shell.execute_reply.started":"2024-05-29T10:44:22.204785Z","shell.execute_reply":"2024-05-29T10:44:22.214980Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"disaster_labels[0]","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.217262Z","iopub.execute_input":"2024-05-29T10:44:22.217558Z","iopub.status.idle":"2024-05-29T10:44:22.231887Z","shell.execute_reply.started":"2024-05-29T10:44:22.217505Z","shell.execute_reply":"2024-05-29T10:44:22.231214Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display a single image using label path. \n# `time` argument shows post or pre disaster images\n# `annotated` argument labels images\ndisplay_img(disaster_labels[0], time='post', annotated=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.233044Z","iopub.execute_input":"2024-05-29T10:44:22.233293Z","iopub.status.idle":"2024-05-29T10:44:22.830477Z","shell.execute_reply.started":"2024-05-29T10:44:22.233240Z","shell.execute_reply":"2024-05-29T10:44:22.829532Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get polygons center coords (lat, long)\ndef get_centroid(coords):\n    polygons = [ wkt.loads(polygon['wkt']) for polygon in coords ]\n    centroid =  MultiPolygon(polygons).centroid\n    try:\n        return {'centroid_x': centroid.x, 'centroid_y': centroid.y, 'latlong': centroid }\n    except IndexError as e:\n        return {'centroid_x': None, 'centroid_y': None, 'latlong': None }","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.832160Z","iopub.execute_input":"2024-05-29T10:44:22.832529Z","iopub.status.idle":"2024-05-29T10:44:22.838869Z","shell.execute_reply.started":"2024-05-29T10:44:22.832471Z","shell.execute_reply":"2024-05-29T10:44:22.837969Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_damage_dict(coords):\n    damage_list = [ get_damage_type(coord['properties']) for coord in coords]\n    return Counter(damage_list)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.840032Z","iopub.execute_input":"2024-05-29T10:44:22.840277Z","iopub.status.idle":"2024-05-29T10:44:22.850135Z","shell.execute_reply.started":"2024-05-29T10:44:22.840225Z","shell.execute_reply":"2024-05-29T10:44:22.849339Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Add centroid and damage dict to metadata\ndef metadata_with_damage(label_path):\n    data = read_label(label_path)\n    coords = data['features']['lng_lat']\n    \n    damage_dict = get_damage_dict(coords)\n    centroid = get_centroid(coords)\n    \n    data['metadata'].update(centroid)\n    data['metadata']['path'] = label_path\n    data['metadata'].update(damage_dict)\n    return data['metadata']\n        \n    ","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.851269Z","iopub.execute_input":"2024-05-29T10:44:22.851508Z","iopub.status.idle":"2024-05-29T10:44:22.860357Z","shell.execute_reply.started":"2024-05-29T10:44:22.851463Z","shell.execute_reply":"2024-05-29T10:44:22.859479Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def generate_metadata_df(disaster_labels):\n    metadata_list = [metadata_with_damage(label_path) for label_path in disaster_labels]\n    df = pd.DataFrame(metadata_list)\n    return df.fillna(df.mean())","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.861522Z","iopub.execute_input":"2024-05-29T10:44:22.861789Z","iopub.status.idle":"2024-05-29T10:44:22.873611Z","shell.execute_reply.started":"2024-05-29T10:44:22.861714Z","shell.execute_reply":"2024-05-29T10:44:22.872782Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Sort df by destroyed count\ndf = generate_metadata_df(disaster_labels)\nsorted_df = df.sort_values(by=['destroyed'], ascending=False)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:22.874819Z","iopub.execute_input":"2024-05-29T10:44:22.875109Z","iopub.status.idle":"2024-05-29T10:44:24.719037Z","shell.execute_reply.started":"2024-05-29T10:44:22.875054Z","shell.execute_reply":"2024-05-29T10:44:24.718411Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sorted_df","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:24.720280Z","iopub.execute_input":"2024-05-29T10:44:24.720500Z","iopub.status.idle":"2024-05-29T10:44:24.774860Z","shell.execute_reply.started":"2024-05-29T10:44:24.720462Z","shell.execute_reply":"2024-05-29T10:44:24.774106Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_generator = sorted_df.iterrows()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:24.775897Z","iopub.execute_input":"2024-05-29T10:44:24.776106Z","iopub.status.idle":"2024-05-29T10:44:24.779618Z","shell.execute_reply.started":"2024-05-29T10:44:24.776070Z","shell.execute_reply":"2024-05-29T10:44:24.778775Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Generate Google Maps link to location\nfrom IPython.core.display import display, HTML\ndef generate_gmaps_link(lat, long):\n    link = f\"https://www.google.com/maps/@?api=1&map_action=map&center={lat},{long}&zoom=18&basemap=satellite\"\n    return HTML(f\"\"\"<a href=\"{link}\" target=\"_blank\">{link}</a>\"\"\")","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:24.781055Z","iopub.execute_input":"2024-05-29T10:44:24.781410Z","iopub.status.idle":"2024-05-29T10:44:24.790432Z","shell.execute_reply.started":"2024-05-29T10:44:24.781351Z","shell.execute_reply":"2024-05-29T10:44:24.789814Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# fetch first row (most damaged location)\nindex, row = next(df_generator)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:24.791799Z","iopub.execute_input":"2024-05-29T10:44:24.792089Z","iopub.status.idle":"2024-05-29T10:44:24.801993Z","shell.execute_reply.started":"2024-05-29T10:44:24.792036Z","shell.execute_reply":"2024-05-29T10:44:24.801254Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# provides google maps link\ngenerate_gmaps_link(row.centroid_y, row.centroid_x)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:24.803119Z","iopub.execute_input":"2024-05-29T10:44:24.803370Z","iopub.status.idle":"2024-05-29T10:44:24.813193Z","shell.execute_reply.started":"2024-05-29T10:44:24.803323Z","shell.execute_reply":"2024-05-29T10:44:24.812440Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Shows damage polygon counts for image\nrow[['no-damage', 'minor-damage', 'major-damage', 'destroyed', 'un-classified']]","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:24.814425Z","iopub.execute_input":"2024-05-29T10:44:24.814953Z","iopub.status.idle":"2024-05-29T10:44:24.828232Z","shell.execute_reply.started":"2024-05-29T10:44:24.814897Z","shell.execute_reply":"2024-05-29T10:44:24.827427Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# shows pre disaster image\ndisplay_img(row.path, time='pre', annotated=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:24.829470Z","iopub.execute_input":"2024-05-29T10:44:24.829837Z","iopub.status.idle":"2024-05-29T10:44:25.423420Z","shell.execute_reply.started":"2024-05-29T10:44:24.829719Z","shell.execute_reply":"2024-05-29T10:44:25.422068Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# shows post disaster image\ndisplay_img(row.path, time='post', annotated=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:25.424623Z","iopub.execute_input":"2024-05-29T10:44:25.424888Z","iopub.status.idle":"2024-05-29T10:44:25.967885Z","shell.execute_reply.started":"2024-05-29T10:44:25.424846Z","shell.execute_reply":"2024-05-29T10:44:25.966539Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plots pre and post disaster images with annotations\nplot_image(row.path)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:25.969199Z","iopub.execute_input":"2024-05-29T10:44:25.969470Z","iopub.status.idle":"2024-05-29T10:44:32.115084Z","shell.execute_reply.started":"2024-05-29T10:44:25.969421Z","shell.execute_reply":"2024-05-29T10:44:32.113723Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Damaged Locations on Map**\n\nThis Map displays the affected locations by their damage type","metadata":{}},{"cell_type":"code","source":"def generate_circle(row):\n    \n    COLOR_MAP = {\n        \"no-damage\": 'green',\n        \"minor-damage\": 'blue',\n        \"major-damage\": '#ffff00',\n        \"destroyed\": 'red',\n        \"un-classified\": 'black'\n    }\n    \n    for damage_type, color in COLOR_MAP.items():\n        yield Circle(\n            location=row.loc[['centroid_y','centroid_x']].tolist(),\n            radius=row.loc[damage_type],\n            color=color)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:32.116341Z","iopub.execute_input":"2024-05-29T10:44:32.116777Z","iopub.status.idle":"2024-05-29T10:44:32.125772Z","shell.execute_reply.started":"2024-05-29T10:44:32.116667Z","shell.execute_reply":"2024-05-29T10:44:32.124562Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"location = df.mean().loc[['centroid_y','centroid_x']].tolist()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:32.127149Z","iopub.execute_input":"2024-05-29T10:44:32.127479Z","iopub.status.idle":"2024-05-29T10:44:32.164454Z","shell.execute_reply.started":"2024-05-29T10:44:32.127430Z","shell.execute_reply":"2024-05-29T10:44:32.163473Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# CODE FOR THIS CELL IS TAKEN FROM https://www.kaggle.com/alexisbcook/interactive-maps\n\n# mean latitude and longitude\n# Create a map\nm_2 = folium.Map(location=location, tiles='openstreetmap', zoom_start=13)\n\n# Add points to the map\nfor idx, row in df.iterrows():\n    generator = generate_circle(row)\n    for circle in generator:\n        circle.add_to(m_2)\n\n# Display the map\nembed_map(m_2, 'm_2.html')","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:32.166168Z","iopub.execute_input":"2024-05-29T10:44:32.166558Z","iopub.status.idle":"2024-05-29T10:44:33.308679Z","shell.execute_reply.started":"2024-05-29T10:44:32.166487Z","shell.execute_reply":"2024-05-29T10:44:33.307842Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"labels_generator = Path('../input').rglob(pattern=f'*.json')\nfull_df = generate_metadata_df(labels_generator)","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:44:33.310069Z","iopub.execute_input":"2024-05-29T10:44:33.310334Z","iopub.status.idle":"2024-05-29T10:46:40.846266Z","shell.execute_reply.started":"2024-05-29T10:44:33.310290Z","shell.execute_reply":"2024-05-29T10:46:40.845533Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plot bargraph based on an agg_func\ndef plot_bargraph(df, x, y, agg_func):\n  new_df = df.groupby('disaster', as_index=False).agg(agg_func)\n\n  for index, row in new_df.iterrows():\n    plt.bar(row.disaster, row.gsd, label=row.disaster, align='center')\n    \n#   plt.legend(loc=1,prop={'size':18})\n\n  plt.xticks(fontsize=22, rotation=90)\n  fig = plt.gcf()\n  fig.set_size_inches(30, 30)\n  plt.savefig(f'{agg_func}.png', dpi=100)\n  plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:46:40.847894Z","iopub.execute_input":"2024-05-29T10:46:40.848152Z","iopub.status.idle":"2024-05-29T10:46:40.854884Z","shell.execute_reply.started":"2024-05-29T10:46:40.848104Z","shell.execute_reply":"2024-05-29T10:46:40.854244Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Mean GSD by grouped by Disater**\n\nThe Ground Sampling Distance will help us get an idea on the spatial resolution of the images per disaster. This has help us normalize the images to a specific resolution during training.","metadata":{}},{"cell_type":"code","source":"plot_bargraph(full_df, x='disaster', y='gsd', agg_func='mean')","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:46:40.855965Z","iopub.execute_input":"2024-05-29T10:46:40.856226Z","iopub.status.idle":"2024-05-29T10:46:42.358915Z","shell.execute_reply.started":"2024-05-29T10:46:40.856178Z","shell.execute_reply":"2024-05-29T10:46:42.357817Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Mean GSD for dataset\nfull_df['gsd'].mean()","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:46:42.360152Z","iopub.execute_input":"2024-05-29T10:46:42.360418Z","iopub.status.idle":"2024-05-29T10:46:42.365385Z","shell.execute_reply.started":"2024-05-29T10:46:42.360367Z","shell.execute_reply":"2024-05-29T10:46:42.364662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Number of images per Disaster**\n\nThe number of datapoints per dataset will give us an idea on which disaster to focus on while training our model.","metadata":{}},{"cell_type":"code","source":"plot_bargraph(full_df, x='disaster', y='gsd', agg_func='count')","metadata":{"execution":{"iopub.status.busy":"2024-05-29T10:46:42.366624Z","iopub.execute_input":"2024-05-29T10:46:42.366898Z","iopub.status.idle":"2024-05-29T10:46:43.943023Z","shell.execute_reply.started":"2024-05-29T10:46:42.366852Z","shell.execute_reply":"2024-05-29T10:46:43.942224Z"},"trusted":true},"execution_count":null,"outputs":[]}]}